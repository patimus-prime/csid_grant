[
  {
    "objectID": "grant.html#abstract",
    "href": "grant.html#abstract",
    "title": "Sweet Dreams and Genetic Schemes: Improving CSID Variant Annotation through Integrated Computational and Genetic Analysis",
    "section": "Abstract",
    "text": "Abstract\nThis proposal outlines a novel approach that leverages recent advancements in computational tools and genetic analysis to enhance variant annotation for CSID, facilitating clinical diagnosis and improving understanding of CSID prevalence. Previous studies have been been hindered by historical limitations in study design and data availability. By integrating genetic databases, protein simulation techniques, and variant prediction tools, this study aims to identify new variants of interest and contribute insights into the molecular and genetic pathology of CSID, its clinical implications and prevalence.\n\nIntroduction\nHistorical studies of CSID prevalence and its mutational landscape have been constrained by small sample sizes and homogeneous populations. Early studies that are typically cited feature sample sizes of:\n\n3 in CSID’s first description1\n399, of which 339 were Caucasian2\n56 Canadian Eskimos3\n97 Greenlanders4\n\nIn addition, recent findings indicate that the clinical presentation of CSID shares similarities with irritable bowel syndrome, raising concerns about accurate diagnosis5–7. Furthermore, the potential variability of CSID’s phenotype, including heterozygote carriers that experience symptoms, necessitates a more thorough investigation of its genetic and molecular causes, improvement of diagnoistic tools and a reevaluation of its prevalence8–10.\n\n\nGenetic Databases and Variant Prediction\nAdvancements in computational biology offer an opportunity to enhance the prediciton and identification of deleterious mutations and inform diagnostics and prevalence in the population.\nDatabases such as ClinVar and gnomAD now encompass diverse and extensive population variant data11,12. As of 17 September 2023, gnomAD contains 3470 variants for SI, and contains 646 ClinVar variants. Of the 646 ClinVar variants, 29 are annotated as pathogenic/likely pathogenic, 66 have conflicting interpretations of pathogenicity, and 272 are of uncertain significance. Therefore, considering all gnomAD data, most entries do not have clinical annotations or have not been well characterized. Previous work analyzing gnomAD data for the Sucrase-Isomaltase (SI) gene to estimate disease prevalence only included known variants13 and did not analyze this population of uncharacterized variants.\nGnomAD includes ClinVar clinical annotations of mutations and predictions of variant effects from the Ensembl Variant Effect Predictor (VEP)14. Predictive tools like VEP can be employed to predict the impact of uncharacterized variants. VEP predicts type of consequence – e.g. missense, frameshift, intron. This is often insufficient to assess the whether a variant is deleterious.\nFortunately, new methods have emerged: both at the protein-ligand simulation level and some LLM-based models, one of which can be applied that predicts effects for all missense mutations15. A preliminary analysis using this model is provided below, and predicts a number of deleterious missense mutations. This and other new models could be applied to other types of variants such as indels, stop gained or even intron variants15,16.\n\n\nProtein Simulation and Interaction Analysis\nAn orthogonal method to large language models is simulation at the protein/molecular level. Revolutionary tools like AlphaFold17 and DiffDock18 enable the modeling and evaluation of variant-protein interactions. AlphaFold can generate mutant structures from their sequences, and then these structures and their interaction with sucrose or with other proteins can be simulated using a variety of molecular simulation technologies. A promising recent tool is DiffDock18, iterations of DiffDock to enable prediction protein-protein interactions or improve prediction accuracy19,20, and more established tools such as AutoDock Vina21,22. These tools can be used to to predict the effects of SI variants on protein function, i.e. their interactions with sucrose, heterozygotic self-interactions, or interactions with other proteins. Integration of these tools is facilitated by the recently reported Foldy23, which conveniently packages AlphaFold, DiffDock, Autodock Vina, and databases into a web app that is easily deployed.\nHowever, the sensitivity of either of these tools, large language model based or protein simulation based, to distinguish benign and deleterious mutatations is not guaranteed. Cross referencing predictions from the large language models and simulation tools, and validating in lab will be necessary. Previous benchmarking of AlphaFold-generated structures with molecular docking had mixed results24. However, emerging tools like DiffDock and PLANTAIN may provide better outcomes. DiffDock reports an accuracy, when simulating without a known binding pocket, of 29%18. PLANTAIN attempts to improve this accuracy by optimzing the scoring function DiffDock uses, and accounts for binding pockets, and may be more fruitful20. AutoDock tools are more established but may be less accurate18; but do account for binding pockets and thus may be useful to compare predictions with21,22.\n\n\nGenetic Analysis and Large Language Models\nNovel genetic analysis tools have recently emerged, providing insights into the genetic landscape of CSID. While gnomAD and ClinVar have integrated VEP, this model is limited in the scope of its predictions, and a more recent protein language model may provide better predictions for missense variants15. Preliminary analysis (an interesting figure is shown directly below, the full analysis is in the last section) employing this tool suggests a large number of missense variants of currently unknown consequence may be associated with CSID.\n\nUsing this protein language model we can predict the delteriousness of missense mutations. The model outputs a score for each missense mutation, and a threshold of -7.5 to separate deleterious/benign mutations is reported15. A lower score predicts a more severe mutation. The graph below is constructed using gnomAD data for missense variants and predictions from this model.\n\n\nCode\n# This cell is lengthy and is mostly just the preliminary analysis below all copied into one cell and outputting the relevant figure.\nimport pandas as pd\n\ndf = pd.read_csv(\"data/gnomAD_v2.1.1_SI_variants_17sep2023.csv\")\n# gnomad.head()\n\n# create a new column 'D' as the concatenated strings of columns 'A', 'B', and 'C'\ndf[\"Variant_ID\"] = (\n    df[\"Chromosome\"].astype(str)\n    + \"-\"\n    + df[\"Position\"].astype(str)\n    + \"-\"\n    + df[\"Reference\"].astype(str)\n    + \"-\"\n    + df[\"Alternate\"].astype(str)\n)\n\n# move the new column 'D' to the far left by reindexing the columns\ndf = df.reindex(columns=[\"Variant_ID\"] + df.columns.tolist())\ninclude_annotations = ['missense_variant']\nmask = df['VEP Annotation'].isin(include_annotations)\ndf_mis = df[mask]\ndf_esm = pd.read_csv(\"data/ESM1b_SI.csv\") \n\nimport re\nfrom Bio.SeqUtils import seq1, seq3\n   \nclass seqConversion:\n  def __init__(self) -&gt; None:\n      pass\n  \n  # intended to be private method, intermediate for convertGnomadHGVS below.      \n  def _parseGnomadHGVS(self, hgvsEntry):\n    # Define a regex pattern to match the format \"stringNUMBERstring\"\n    pattern = r'([A-Za-z]+)(\\d+)([A-Za-z]+)'\n\n    # Use re.match to find the first match in the input string, need to account for multiple and check the duplicates if exist\n    match = re.match(pattern, hgvsEntry)\n\n    if match: # which should be, but good in case weird data i don't anticipate\n        # Extract the three parts from the match object\n        aa_wt = match.group(1)\n        pos = match.group(2)\n        aa_mut = match.group(3)\n\n        # Convert the numbers to an integer (if needed)\n        pos = int(pos)\n\n        return aa_wt, pos, aa_mut\n    # FIXME: May need more handling cases, so far this is working on SI data 22 Sep 2023\n    else:\n        # Handle the case where no match is found\n        return None, None, None\n\n  def convertGnomadHGVS(self, hgvsEntry):\n    # NOTE: This assumes we're only passing in the protein-level variants, which, should be the only case this function is called, i.e. missense variants\n    \n    # strip 'p.'\n    hgvsEntry = hgvsEntry.lstrip('p.')\n    \n    # get the gnomad formatted variables\n    aa_wt, pos, aa_mut = self._parseGnomadHGVS(hgvsEntry)\n    \n    if aa_wt is None or pos is None or aa_mut is None:\n            return None\n    else:\n      # codes to one-letter codes; from BioSeq import above\n      aa_wt1 = seq1(aa_wt)\n      aa_mut1 = seq1(aa_mut)\n\n      # assemble the esm1b format of gnomad entry\n      newFormat = f\"{aa_wt1}{pos}{aa_mut1}\"\n      return newFormat\n \n  def getProteinVariants(hgvsEntry):\n    p_pattern = r\"p.*\"  # Use .* to match zero or more occurrences of 'p'\n    matches = re.findall(p_pattern, hgvsEntry)\n\n    if matches:\n        return matches\n    else:\n        # Handle the case where no match is found\n        return None\n\n# Converter = seqConversion()\n# df_mis['HGVS_ESM1b']  = df_mis['HGVS Consequence'].apply(Converter.convertGnomadHGVS)\n\n# to deal with error:\nConverter = seqConversion()\n# df_mis.loc[:, 'HGVS_ESM1b'] = df_mis['HGVS Consequence'].apply(Converter.convertGnomadHGVS)\ndf_mis = df_mis.assign(HGVS_ESM1b=df_mis['HGVS Consequence'].apply(Converter.convertGnomadHGVS))\n\n\nmerged_df = df_mis.merge(df_esm[['variant', 'score']], left_on='HGVS_ESM1b', right_on='variant', how='left')\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# Extract the 'score' column from the merged DataFrame\nscores = merged_df[\"score\"]\n\n\nall_known_path = df['ClinVar Clinical Significance'].isin(['Pathogenic', 'Likely pathogenic', 'Pathogenic/Likely pathogenic  '])\nakp_df = df[all_known_path]\n\npathogenic_missense_variants = merged_df['ClinVar Clinical Significance'].isin(['Pathogenic', 'Likely pathogenic',]) # # adds 23 more samples that have varying scores\n\npmv_df = merged_df[pathogenic_missense_variants]\npmv_df = pmv_df.sort_values(by='score', ascending=True)\n\n# Filter, get benign bariants\nbenign_missense_variants = merged_df['ClinVar Clinical Significance'].isin(['Benign', 'Benign/Likely benign', 'Likely benign'])\n\n# bmv: benign missense variants\nbmv_df = merged_df[benign_missense_variants]\nbmv_df = bmv_df.sort_values(by='score', ascending=True)\n\n# Define the threshold\nthreshold = -7.5\n\n# Create a new feature 'below threshold' based on the 'score' column\nmerged_df['below threshold'] = merged_df['score'].apply(lambda x: \"yes\" if x &lt; threshold else \"no\")\n\nimport plotly.express as px\n\nfig = px.histogram(\n    merged_df,\n    x=\"score\",\n    color = \"below threshold\",\n    nbins=20,\n    opacity=1,\n    labels={\"score\": \"Scores\"},\n    title=\"Distribution of Scores Within Gnomad\",\n)\n\n# Add markers or lines for known pathogenic variants\nfor idx, row in pmv_df.iterrows():\n    fig.add_shape(type='line', x0=row['score'], x1=row['score'], y0=0, y1=1, opacity = 0.4,\n                  xref='x', yref='paper', line=dict(color='red'))\n\n# Add markers/lines for benign variants\nfor idx, row in bmv_df.iterrows():\n    fig.add_shape(type='line', x0=row['score'], x1=row['score'], y0=0, y1=1, opacity = 0.4,\n                  xref='x', yref='paper', line=dict(color='green'))\n\n# Customize the layout\nfig.update_layout(bargap=0.1)\n\n# Show the plot\nfig.show()\n\n\n\n                                                \n\n\nIn this preliminary analysis, ClinVar annotated variants that are benign/likely benign and pathogenic/likely pathogenic are shown with green/red lines overlaid on the distribution of variants in gnomAD and their predicted deleteriousness. There are limited missense annotated variants compared to the overall dataset – but a trend does appear amongst benign mutations to be above the score threshold and be correctly separated.\nOverall, there are 531 missense mutations that fall below the threshold and are predicted to be deleterious. To validate these results, a good approach may be to start from the most deleterious (negatively scored) predicted mutation and assess variants with increasingly positive scores.\n\n\nBackground and Collaboration\nMy background includes an MS in bioinformatics where I gained experience in protein analysis, 2 years in pharameceutical R&D at Eli Lilly performing physicochemical testing on antibodies and peptides to assess stability, and a BS in Chemical Engineering, BS in Molecular and Cellular Biology and BA in Biochemistry.\nMy motivation to study CSID stems from my patent experience, where CSID emerged as a potential explanation. I identified a gap in the literature and saw an opportunity to leverage new computational tools to improve patient outcomes. I’m open to share more details about my journey. The patient experience with the disease as a candidate has been arduous and contributing to better care for others would be deeply gratifying.\nThe preparation of this proposal has also been highly informative for career aspirations. I’m actively considering pursuing doctoral studies (MD, PhD, or an MD/PhD) and this project aligns well with my goal of connecting research and healthcare.\nThe proposed project is intricate and collaboration is indispensible. Seeking guidance and partnerships with experts has been a priority from the start. Several opportunities for collaboration include:\n\nCollaborating with Dr. D’Amato, and Dr. Naim for lab confirmation and disease expertise. I’ve also reached out to Dr. Treem, who authored some earlier reviews. Together lab confirmation can be facilitated/organized and a thorough understanding and robust DOE can be achieved.\nEngage with the Foldy development team (Keasling Lab/Berkeley National Lab) for features such as DiffDock-PP or PLANTAIN that may be used and integrated into the software; the development in this project may benefit others, or integration of these tools can be conducted in parallel as part of other efforts.\nSeek input from the authors of DiffDock and PLANTAIN, and other molecular simulation experts. Their insights would be invaluable for optimizing the approach and understanding the strengths and limitations of these tools."
  },
  {
    "objectID": "grant.html#costbudget",
    "href": "grant.html#costbudget",
    "title": "Sweet Dreams and Genetic Schemes: Improving CSID Variant Annotation through Integrated Computational and Genetic Analysis",
    "section": "Cost/Budget",
    "text": "Cost/Budget\nThis section to be finalized after nailing down lab confirmation\n(Ask about lab confirmation costs)\n(Ask about salary/stipend/consulting? idk how this works with QOL)\nThe cost estimates stated here are retrieved from Google Cloud Pricing Calculator on 26 Sep 2023.\nUsing the Foldy architecture/out of the box solution for AlphaFold and molecular simulation, computation will run on Google Cloud. The SI complex is about 1500 residues; Foldy documentation suggests that 3000 residue complexes be run on a machine type that costs $3700 a month. Therefore a mid-range machine may be appropriate, one of which costs $2682 a month. Low-range machines of about $420-1509 a month are also available but are unlikely to have sufficient resources to run the SI complex. The cost estimates are attached as pdfs.\nThe scope of the final project will dictate how many variants are run and the implementation of other tools beyond what is included in Foldy (Foldy includes AlphaFold, DiffDock and AutoDock Vina along with database integration). These tools will likely run on the same machine but require additional development time."
  },
  {
    "objectID": "grant.html#timeline-and-milestones",
    "href": "grant.html#timeline-and-milestones",
    "title": "Sweet Dreams and Genetic Schemes: Improving CSID Variant Annotation through Integrated Computational and Genetic Analysis",
    "section": "Timeline and Milestones",
    "text": "Timeline and Milestones\nThis section to be finalized after nailing down lab confirmation\n(Ask about lab confirmation timeline)\nThis study proposes computational methods and laboratory confirmation. The LLMs are relatively cheap to run, whereas the infrastructure and machines for AlphaFold and molecular simulations are more intensive.\nFurther, there are models not included in Foldy. Timeline to implementation of different methods will be influenced by potential collaboration partners and documentation of methods, namely PLANTAIN and other LLM. Using Foldy as-is however, deployment is finished in a few days (time for machine to boot and download relevant databases), after which simulations can be run. Initially, scripts would be developed to construct sequences from Ensembl/UniProt consensus sequence, gnomAD data, or other data sources.\nLaboratory confirmation can occur after all results have been generated, or after smaller bolus runs of the simulations. This strategy may be superior to inform model optimization and feasibility.\nA reasonable order of events or timeline may look like the below:\n\nValidate LLM model: Lab validation, timeline per variant? of LLM missense model(??)\nInitial protein simulation analysis: setup of as-is of Foldy and development, validation of scripts to generate mutant protein sequences (2 weeks)\nRunning a small sample, validate protein simulation strategy; unknown how much time to generate each SI complex, molecular simulation should be relatively quick\nLab confirmation/validation of Fold/docking results(??)\nIntegration and validation of other models, e.g. other LLM, or other simulation like PLANTAIN, DiffDock-PP\nMore lab confirmation\n\nTherefore within dev/simulation + lab confirmation some idea of validity of models and feasibility can be achieved. Then, conservatively, within … a few months of development and further lab confirmation…? the overall feasibilty and scope of the project can be assessed."
  }
]